[
  {
    "type": "waitTime",
    "config": {
      "timeoutType": "fixedValue",
      "timeout": 1000,
      "timeoutMin": 1000,
      "timeoutMax": 300000,
      "remark": ""
    }
  },
  {
    "type": "newPage",
    "config": {}
  },
  {
    "type": "closeOtherPage",
    "config": {
      "keepCurrent": true
    }
  },
  {
    "type": "gotoUrl",
    "config": {
      "url": "https://discord.com/channels/@me",
      "timeout": 30000,
      "remark": ""
    }
  },
  {
    "type": "closeOtherPage",
    "config": {
      "keepCurrent": true
    }
  },
  {
    "type": "waitTime",
    "config": {
      "timeoutType": "randomInterval",
      "timeout": 1000,
      "timeoutMin": 8000,
      "timeoutMax": 10000,
      "remark": ""
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "try {\n    const isAuthedByPath = !location.pathname.startsWith('/login');\n    const hasDM = !!document.querySelector('a[href=\"/channels/@me\"]');\n    const ok = isAuthedByPath || hasDM;\n    return ok ? \"true\" : \"false\";   // <— строка, не boolean\n  } catch(e) { return \"false\"; }",
      "variable": "check_login",
      "remark": ""
    }
  },
  {
    "type": "ifElse",
    "config": {
      "condition": [
        "check_login"
          "type": "javaScript",
          "config": {
            "params": [],
            "content": "try {\n    // даём интерфейсу дорендериться\n    await new Promise(r => setTimeout(r, 600));\n\n    // 1) берём контейнер нижней панели аккаунта (локаль-независимо)\n    const userPanel =\n      document.querySelector('section[class*=\"panels_\"]') || // универсально\n      document.querySelector('section[aria-label=\"User area\"]') || // EN\n      document.querySelector('section[aria-label=\"Пользовательская область\"]'); // RU\n\n    if (userPanel) {\n      // 2) в ней берём аватар с aria-label=\"username, Online/В сети/…\"\n      const avatar = userPanel.querySelector('[role=\"img\"][aria-label]');\n      if (avatar) {\n        const label = (avatar.getAttribute('aria-label') || '').trim();\n        // берём всё ДО первой запятой — это именно username/handle\n        let nick = label.split(',')[0].trim();\n\n        // подчистим: уберём хвосты типа эмодзи и повторы\n        // пример \"rnfwy6tzc 𒀭rnfwy6tzc\" -> \"rnfwy6tzc\"\n        nick = nick\n          .replace(/[\\u200D\\uFE0F]/g, '')          // служебные символы эмодзи\n          .replace(/\\s*[\\p{Emoji_Presentation}\\p{Extended_Pictographic}].*$/u, '') // всё после эмодзи\n          .replace(/^([A-Za-z0-9._-]{2,32}).*$/, '$1') // если повторяется, берём первый \"дискордный\" токен\n          .trim();\n\n        if (nick) return nick;\n      }\n\n      // 3) запасной вариант: текст из блока nameTag в нижней панели\n      const nameEl = userPanel.querySelector('[class*=\"nameTag\"] [class*=\"title\"], [class*=\"nameTag\"]');\n      if (nameEl) {\n        const raw = (nameEl.textContent || '').trim().replace(/\\s+/g, ' ');\n        // вытащим дискордный токен наподобие \"rnfwy6tzc\"\n        const m = raw.match(/[A-Za-z0-9._-]{2,32}/);\n        if (m) return m[0];\n        return raw;\n      }\n    }\n\n    return \"\";\n  } catch (e) {\n    return \"\";\n  }",
            "variable": "ds_nick",
            "remark": ""
          }
        }
      ],
      "remark": "",
      "other": [
        {
          "type": "javaScript",
          "config": {
            "params": [],
            "content": "return \"\";",
            "variable": "nick_to_write",
            "remark": "",
            "_copyItemIndex": "0_6_1",
            "_copyItemType": "children_children"
          }
        }
      ]
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "try {\n    const candidates = [];\n    const addCandidate = (val) => {\n      if (val === undefined || val === null) return;\n      const text = String(val).trim();\n      if (!text) return;\n      candidates.push(text);\n    };\n\n    const collectFromObject = (obj) => {\n      if (!obj || typeof obj !== 'object') return;\n      addCandidate(obj.serialNumber);\n      addCandidate(obj.serial_number);\n      addCandidate(obj.serial);\n      addCandidate(obj.id);\n    };\n\n    const globalCandidates = [\n      window.profileInfo,\n      window.profile_info,\n      window.profile,\n      window.AdsPowerProfile,\n      window.apx,\n      window.adsPower,\n      window.adspower,\n      window.AdsPower,\n      window.AdsPower?.profileInfo,\n      window.apx?.profileInfo,\n      window.adsPower?.profileInfo,\n      window.adspower?.profileInfo,\n      window.AdsPower?.profile_info\n    ];\n    globalCandidates.forEach(collectFromObject);\n\n    addCandidate(window.serialNumber);\n    addCandidate(window.serial_number);\n\n    if (typeof window.name === 'string' && window.name) {\n      const match = window.name.match(/serial(?:Number|_number)?[:=]?([\\w-]+)/i);\n      if (match && match[1]) addCandidate(match[1]);\n    }\n\n    try {\n      const nav = navigator || window.navigator;\n      if (nav && typeof nav.serialNumber !== 'undefined') addCandidate(nav.serialNumber);\n      if (nav && typeof nav.serial_number !== 'undefined') addCandidate(nav.serial_number);\n    } catch (navErr) {}\n\n    try {\n      const ls = window.localStorage;\n      if (ls && typeof ls.length === 'number') {\n        for (let i = 0; i < ls.length; i += 1) {\n          const key = ls.key(i);\n          if (!key) continue;\n          if (!/serial|profile|ads/i.test(key)) continue;\n          let value;\n          try {\n            value = ls.getItem(key);\n          } catch (lsErr) {\n            continue;\n          }\n          if (!value) continue;\n          try {\n            const parsed = JSON.parse(value);\n            collectFromObject(parsed);\n          } catch (jsonErr) {\n            const match = String(value).match(/serial(?:Number|_number)?[\"']?\\s*[:=]\\s*[\"']?([A-Za-z0-9._-]+)/i);\n            if (match && match[1]) addCandidate(match[1]);\n          }\n        }\n      }\n    } catch (lsErrOuter) {}\n\n    const ordered = candidates\n      .map((text) => text.replace(/\\s+/g, '').trim())\n      .filter(Boolean)\n      .filter((text, idx, arr) => arr.indexOf(text) === idx);\n\n    if (!ordered.length) return '';\n\n    ordered.sort((a, b) => b.length - a.length);\n    return ordered[0];\n  } catch (e) {\n    return '';\n  }",
      "variable": "serial_number",
      "remark": ""
    }
  },
  {
    "type": "googleSheet",
    "config": {
      "type": "read",
      "sheetId": "1U1ZsaQW-V5gB0UkMc7Kdi01lNRYdjmTCpAjKp20d_S8",
      "sheetName": "Discord - check login RPA",
      "rangeType": "range",
      "range": "A:C",
      "template": "",
      "isKey": "0",
      "variable": "gs_existing_rows",
      "remark": ""
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "try {\n    const serial = ('${serial_number}' || '').trim();\n    if (!serial) return '';\n\n    const rawText = '${gs_existing_rows}';\n    let parsed;\n    try {\n      parsed = rawText ? JSON.parse(rawText) : undefined;\n    } catch (jsonError) {\n      parsed = undefined;\n    }\n\n    const raw = parsed || (Array.isArray(window.gs_existing_rows) ? { values: window.gs_existing_rows } : {});\n    const values = Array.isArray(raw?.values) ? raw.values : Array.isArray(raw) ? raw : [];\n\n    let startRow = 1;\n    if (raw && typeof raw.range === 'string') {\n      const match = raw.range.match(/^[^!]*!([A-Z]+)(\\d+)/);\n      if (match && match[2]) {\n        startRow = parseInt(match[2], 10) || 1;\n      } else {\n        const fallback = raw.range.match(/([A-Z]+)(\\d+)/);\n        if (fallback && fallback[2]) {\n          startRow = parseInt(fallback[2], 10) || 1;\n        }\n      }\n    }\n\n    const normalizedSerial = serial.toLowerCase();\n\n    for (let idx = 0; idx < values.length; idx += 1) {\n      const row = values[idx];\n      const cell = Array.isArray(row) && row.length ? String(row[0] ?? '').trim() : '';\n      if (!cell) continue;\n      const normalizedCell = cell.toLowerCase();\n      if (normalizedCell === normalizedSerial) {\n        const rowNumber = startRow + idx;\n        return `A${rowNumber}:C${rowNumber}`;\n      }\n    }\n\n    return '';\n  } catch (e) {\n    return '';\n  }",
      "variable": "gs_target_range",
      "remark": ""
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "return ('${gs_target_range}' || '').trim() ? 'true' : 'false';",
      "variable": "gs_has_row",
      "remark": ""
    }
  },
  {
    "type": "ifElse",
    "config": {
      "condition": [
        "gs_has_row"
      ],
      "relation": "equal",
      "result": "true",
      "hiddenChildren": false,
      "children": [
        {
          "type": "googleSheet",
          "config": {
            "type": "write",
            "sheetId": "1U1ZsaQW-V5gB0UkMc7Kdi01lNRYdjmTCpAjKp20d_S8",
            "sheetName": "Discord - check login RPA",
            "rangeType": "range",
            "range": "${gs_target_range}",
            "template": " [ \n    [ \"${serial_number}\", \"${check_login}\", \"${ds_nick}\" ]\n]",
            "isKey": "0",
            "variable": "",
            "remark": ""
          }
        }
      ],
      "remark": "",
      "other": [
        {
          "type": "googleSheet",
          "config": {
            "type": "write",
            "sheetId": "1U1ZsaQW-V5gB0UkMc7Kdi01lNRYdjmTCpAjKp20d_S8",
            "sheetName": "Discord - check login RPA",
            "rangeType": "append",
            "range": "",
            "template": " [ \n    [ \"${serial_number}\", \"${check_login}\", \"${ds_nick}\" ]\n]",
            "isKey": "0",
            "variable": "",
            "remark": ""
          }
        }
      ]
    }
  },
  {
    "type": "closeBrowser",
    "config": {}
  }
]
