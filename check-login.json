[
  {
    "type": "waitTime",
    "config": {
      "timeoutType": "fixedValue",
      "timeout": 1200,
      "timeoutMin": 1200,
      "timeoutMax": 1200,
      "remark": "стабилизация запуска"
    }
  },
  {
    "type": "newPage",
    "config": {}
  },
  {
    "type": "closeOtherPage",
    "config": {
      "keepCurrent": true
    }
  },
  {
    "type": "gotoUrl",
    "config": {
      "url": "https://discord.com/channels/@me",
      "timeout": 45000,
      "remark": "открываем Discord"
    }
  },
  {
    "type": "closeOtherPage",
    "config": {
      "keepCurrent": true
    }
  },
  {
    "type": "waitTime",
    "config": {
      "timeoutType": "randomInterval",
      "timeout": 1000,
      "timeoutMin": 5000,
      "timeoutMax": 7000,
      "remark": "ждём прогрузку интерфейса"
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "(() => {\n  const target = 'https://discord.com/channels/@me';\n  try {\n    if (!location.href.startsWith(target)) {\n      location.href = target;\n    } else if (document.visibilityState !== 'visible') {\n      window.focus?.();\n    }\n  } catch (error) {\n    console.error('failed to enforce discord tab', error);\n  }\n  return location.href;\n})();",
      "variable": "current_url",
      "remark": "фиксируем активную вкладку"
    }
  },
  {
    "type": "waitTime",
    "config": {
      "timeoutType": "randomInterval",
      "timeout": 1000,
      "timeoutMin": 4000,
      "timeoutMax": 6000,
      "remark": "даём дорендериться после фокуса"
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "(() => {\n  const result = { loggedIn: false, nickname: '' };\n  try {\n    const path = (location.pathname || '').toLowerCase();\n    if (path && !path.startsWith('/login')) {\n      result.loggedIn = true;\n    }\n\n    const probes = [\n      () => document.querySelector('a[href=\"/channels/@me\"][aria-current=\"page\"]'),\n      () => document.querySelector('[data-list-item-id=\"guildsnav___home\"]'),\n      () => document.querySelector('[aria-label=\"Direct Messages\"]'),\n      () => document.querySelector('[aria-label=\"Личные сообщения\"]')\n    ];\n    if (!result.loggedIn) {\n      result.loggedIn = probes.some((probe) => {\n        try { return !!probe(); } catch (_) { return false; }\n      });\n    }\n\n    if (result.loggedIn) {\n      const panelSelectors = [\n        'section[class*=\"panels_\"]',\n        'section[aria-label=\"User area\"]',\n        'section[aria-label=\"Пользовательская область\"]'\n      ];\n      let userPanel = null;\n      for (const selector of panelSelectors) {\n        userPanel = document.querySelector(selector);\n        if (userPanel) break;\n      }\n\n      const nicknameCandidates = [];\n      if (userPanel) {\n        const ariaAvatar = userPanel.querySelector('[role=\"img\"][aria-label]');\n        if (ariaAvatar) {\n          nicknameCandidates.push((ariaAvatar.getAttribute('aria-label') || '').split(',')[0]);\n        }\n        const nameTag = userPanel.querySelector('[class*=\"nameTag\"] [class*=\"title\"], [class*=\"nameTag\"]');\n        if (nameTag) {\n          nicknameCandidates.push(nameTag.textContent || '');\n        }\n      }\n\n      const headerTitle = document.querySelector('[class*=\"title-\"] span');\n      if (headerTitle) {\n        nicknameCandidates.push(headerTitle.textContent || '');\n      }\n\n      const cleaned = nicknameCandidates\n        .map((text) => (text || '').trim())\n        .filter(Boolean)\n        .map((text) => text\n          .replace(/[\\u200d\\u200c\\u200b\\u200e\\u200f\\uFE0F]/g, '')\n          .replace(/\\s+/g, ' ')\n        );\n\n      for (const text of cleaned) {\n        const match = text.match(/[A-Za-z0-9._-]{2,32}/);\n        if (match) {\n          result.nickname = match[0];\n          break;\n        }\n        if (!result.nickname) {\n          result.nickname = text;\n        }\n      }\n    }\n  } catch (error) {\n    console.error('discord login detection error', error);\n  }\n  window.__discord_check = result;\n  return result.loggedIn ? 'true' : 'false';\n})();",
      "variable": "discord_login",
      "remark": "проверяем авторизацию"
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "(() => {\n  const info = window.__discord_check;\n  if (info && typeof info.nickname === 'string') {\n    return info.nickname;\n  }\n  return '';\n})();",
      "variable": "discord_nickname",
      "remark": "берём никнейм"
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "(() => {\n  const serials = new Set();\n  const pushValue = (value) => {\n    if (value === undefined || value === null) return;\n    const text = String(value).trim();\n    if (!text) return;\n    const cleaned = text.replace(/[^A-Za-z0-9._-]/g, '').trim();\n    if (cleaned) serials.add(cleaned);\n  };\n\n  const collectFromObject = (obj) => {\n    if (!obj || typeof obj !== 'object') return;\n    const keys = ['serialNumber', 'serial_number', 'serial', 'profileSerial', 'id'];\n    for (const key of keys) {\n      if (key in obj) pushValue(obj[key]);\n    }\n  };\n\n  const knownGlobals = ['profileInfo', 'profile_info', 'profile', 'AdsPowerProfile', 'AdsPower', 'adsPower', 'adspower', 'apx'];\n  for (const key of knownGlobals) {\n    try {\n      const candidate = window[key];\n      collectFromObject(candidate);\n      if (candidate && typeof candidate === 'object') {\n        collectFromObject(candidate.profileInfo);\n        collectFromObject(candidate.profile_info);\n      }\n    } catch (_) {}\n  }\n\n  try {\n    collectFromObject(window.AdsPower?.profileInfo);\n    collectFromObject(window.adsPower?.profileInfo);\n    collectFromObject(window.adspower?.profileInfo);\n    collectFromObject(window.apx?.profileInfo);\n  } catch (_) {}\n\n  const tryStorage = (storage) => {\n    if (!storage || typeof storage.length !== 'number') return;\n    for (let i = 0; i < storage.length; i += 1) {\n      const key = storage.key(i);\n      if (!key || !/serial|profile|ads/i.test(key)) continue;\n      let value = null;\n      try {\n        value = storage.getItem(key);\n      } catch (_) {\n        continue;\n      }\n      if (!value) continue;\n      try {\n        const parsed = JSON.parse(value);\n        collectFromObject(parsed);\n      } catch (_) {\n        const match = String(value).match(/serial(?:Number|_number)?[\\\"':=\\s]*([A-Za-z0-9._-]+)/i);\n        if (match && match[1]) pushValue(match[1]);\n      }\n    }\n  };\n\n  tryStorage(window.localStorage);\n  tryStorage(window.sessionStorage);\n\n  try {\n    if (typeof window.name === 'string') {\n      const match = window.name.match(/serial(?:Number|_number)?[:=]?([A-Za-z0-9._-]+)/i);\n      if (match && match[1]) pushValue(match[1]);\n    }\n  } catch (_) {}\n\n  const ordered = Array.from(serials).sort((a, b) => b.length - a.length || a.localeCompare(b));\n  return ordered[0] || '';\n})();",
      "variable": "profile_serial",
      "remark": "определяем серийный номер профиля"
    }
  },
  {
    "type": "googleSheet",
    "config": {
      "type": "read",
      "sheetId": "1U1ZsaQW-V5gB0UkMc7Kdi01lNRYdjmTCpAjKp20d_S8",
      "sheetName": "Discord - check login RPA",
      "rangeType": "range",
      "range": "A:C",
      "template": "",
      "isKey": "0",
      "variable": "gs_existing",
      "remark": "читаем текущие строки"
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "(() => {\n  const serial = ('${profile_serial}' || '').trim();\n  if (!serial) return '';\n\n  const rawText = '${gs_existing}';\n  let parsed;\n  try {\n    parsed = rawText ? JSON.parse(rawText) : undefined;\n  } catch (_) {\n    parsed = undefined;\n  }\n\n  const values = Array.isArray(parsed?.values) ? parsed.values : Array.isArray(parsed) ? parsed : [];\n\n  let startRow = 1;\n  const rangeText = typeof parsed?.range === 'string' ? parsed.range : '';\n  const explicitMatch = rangeText.match(/([A-Z]+)(\\d+)/);\n  if (explicitMatch && explicitMatch[2]) {\n    startRow = parseInt(explicitMatch[2], 10) || 1;\n  }\n\n  const normalizedSerial = serial.toLowerCase();\n  for (let index = 0; index < values.length; index += 1) {\n    const row = values[index];\n    if (!Array.isArray(row) || !row.length) continue;\n\n    const cellValue = String(row[0] ?? '').trim();\n    if (!cellValue) continue;\n    if ((startRow + index) === 1 && cellValue.toLowerCase() === 'profile_serial') continue;\n\n    if (cellValue.toLowerCase() === normalizedSerial) {\n      const rowNumber = startRow + index;\n      return `B${rowNumber}:C${rowNumber}`;\n    }\n  }\n  return '';\n})();",
      "variable": "gs_target_range",
      "remark": "находим диапазон для перезаписи"
    }
  },
  {
    "type": "javaScript",
    "config": {
      "params": [],
      "content": "return ('${gs_target_range}' || '').trim() ? 'true' : 'false';",
      "variable": "gs_should_overwrite",
      "remark": "проверяем, есть ли строка"
    }
  },
  {
    "type": "ifElse",
    "config": {
      "condition": [
        "gs_should_overwrite"
      ],
      "relation": "equal",
      "result": "true",
      "hiddenChildren": false,
      "children": [
        {
          "type": "googleSheet",
          "config": {
            "type": "write",
            "sheetId": "1U1ZsaQW-V5gB0UkMc7Kdi01lNRYdjmTCpAjKp20d_S8",
            "sheetName": "Discord - check login RPA",
            "rangeType": "range",
            "range": "${gs_target_range}",
            "template": " [ \n    [ \"${discord_login}\", \"${discord_nickname}\" ]\n ]",
            "isKey": "0",
            "variable": "",
            "remark": "обновляем существующую строку"
          }
        }
      ],
      "remark": "",
      "other": [
        {
          "type": "googleSheet",
          "config": {
            "type": "write",
            "sheetId": "1U1ZsaQW-V5gB0UkMc7Kdi01lNRYdjmTCpAjKp20d_S8",
            "sheetName": "Discord - check login RPA",
            "rangeType": "append",
            "range": "",
            "template": " [ \n    [ \"${profile_serial}\", \"${discord_login}\", \"${discord_nickname}\" ]\n ]",
            "isKey": "0",
            "variable": "",
            "remark": "добавляем новую строку"
          }
        }
      ]
    }
  },
  {
    "type": "closeBrowser",
    "config": {}
  }
]